/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */

part of lib_test;

class MultipleListMariaDBStore extends IMariaDBStore {
  static const String table = 'Multiple';

  static const Map store = const {"type":"mariaDB","readWriteSeparate":false,"sharding":true,"shardMethod":"CRC32","master":"GameDB","slave":"GameDBSlave","table":"Multiple"};

  static Future<MultipleList> set(MultipleList list) {
    if (list is! MultipleList) throw new IStoreException(21039);

    if (!list.isUpdated()) {
      new IStoreException(26008);
      Completer completer = new Completer();
      completer.complete(list);
      return completer.future;
    }

    ConnectionPool handler = new IMariaDBHandlerPool().getWriteHandler(store, list);

    List waitList = [];
    Map toAddList = list.getToAddList();
    Map toSetList = list.getToSetList();

    if (toAddList.length != 0) {
      waitList.add(_addChildren(toAddList, handler));
    }
    if (toSetList.length != 0) {
      waitList.add(_setChild(toSetList, handler));
    }
  }

  static Future _addChildren(Map toAddList, ConnectionPool handler) {
    List params = [];
    toAddList.forEach((String childId, Multiple model) {
      params.add(model.toAddList(true));
    });
    return handler
    .prepare(IMariaDBSQLPrepare.makeAddByClass(table, Multiple))
    .then((query) => query.executeMulti(params));
  }

  static Future _setChild(Map toSetList, ConnectionPool handler) {

  }
}
