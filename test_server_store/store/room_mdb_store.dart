/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */


part of lib_test_server_store;

class RoomMariaDBStore extends IMariaDBStore {
  static const Map store = const {"type":"mariaDB","readWriteSeparate":false,"sharding":true,"shardMethod":"CRC32","master":"GameDB","slave":"GameDBSlave","table":"Room"};
  static const String table = 'Room';
  static const String _modelName = 'Room';

  static Future add(Room model) {
    if (model is! Room) throw new IStoreException(21023, [model.runtimeType, _modelName]);

    List toAddList = model.toAddList(true);
    if (toAddList.length == 0) throw new IStoreException(21035, [_modelName]);

    ConnectionPool handler = new IMariaDBHandlerPool().getWriteHandler(store, model.getUnitedPK());

    return handler.prepareExecute(IMariaDBSQLPrepare.makeAdd(table, Room._mapFull, Room._columns), toAddList)
    .then((Results results) {
      if (results.affectedRows != 1) throw new IStoreException(21025, [_modelName]);
      return model;
    }).catchError((e) {
      if (e is MySqlException) {
        if (e.errorNumber == 1062) throw new IStoreException(21028, [_modelName]);
        throw e;
      }
      throw e;
    });
  }

  static Future set(Room model) {
    if (model is! Room) throw new IStoreException(21026, [model.runtimeType, _modelName]);

    List toSetList = model.toSetList(true);
    if (toSetList.length == 0) {
      new IStoreException(21501, [_modelName]);
      Completer completer = new Completer();
      completer.complete(model);
      return completer.future;
    }

    ConnectionPool handler = new IMariaDBHandlerPool().getWriteHandler(store, model.getUnitedPK());

    return handler.prepareExecute(
        IMariaDBSQLPrepare.makeSet(table, model),
        IMariaDBSQLPrepare.makeWhereValues(model, toSetList)
    ).then((Results results) {
      if (results.affectedRows == 0) new IStoreException(21502, [_modelName]);
      if (results.affectedRows > 1) new IStoreException(21503, [_modelName]);
      return model;
    }).catchError(_handleErr);
  }

  static Future get(id) {
    Room model = new Room()..setPK(id);
    ConnectionPool handler = new IMariaDBHandlerPool().getReaderHandler(store, model.getUnitedPK());

    return handler.prepareExecute(
        IMariaDBSQLPrepare.makeGet(table, model),
        IMariaDBSQLPrepare.makeWhereValues(model, [])
    ).then((Results results) => results.toList())
    .then((List result) {
      if (result.length == 0) return model;
      if (result.length != 1) throw new IStoreException(21022, [_modelName]);
      return model..fromList(result[0])..setExist();
    })
    .catchError(_handleErr);
  }

  static Future del(model) {
    if (model is! Room) throw new IStoreException(21034, [model.runtimeType, _modelName]);

    ConnectionPool handler = new IMariaDBHandlerPool().getWriteHandler(store, model.getUnitedPK());
    return handler.prepareExecute(
        IMariaDBSQLPrepare.makeDel(table, model),
        IMariaDBSQLPrepare.makeWhereValues(model, [])
    ).then((Results results) {
      if (results.affectedRows == 0) new IStoreException(21504, [_modelName]);
      if (results.affectedRows != 1) new IStoreException(21505, [_modelName]);
      return results.affectedRows;
    }).catchError(_handleErr);
  }

  static void _handleErr(e) => throw e;
}
    