/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */


part of lib_test_server_store;

class RoomPKRedisStore extends IRedisStore {
  static const String _key = 'r-pk';
  static const String _pkName = 'RoomPK';

  static const Map store = const {"type":"redis","readWriteSeparate":false,"shardMethod":"NONE","master":"SingleCache","slave":"SingleCacheSlave","abb":"r"};

  static Future set(RoomPK pk) {
    if (pk is! RoomPK) throw new IStoreException(20034, [pk.runtimeType, _pkName]);
    if (!pk.isUpdated()) {
      new IStoreException(20505, [_pkName]);
      Completer completer = new Completer();
      completer.complete(pk);
      return completer.future;
    }

    num value = pk.get();
    if (value is! num) throw new IStoreException(20035, [_pkName, value]);

    IRedis handler = new IRedisHandlerPool().getWriteHandler(store, _key);
    return handler.set(_key, value.toString())
    .then((String result) {
      if (result != 'OK') throw new IStoreException(20036, [_pkName]);
      return pk..setUpdated(false);
    })
    .catchError(_handleErr);
  }

  static Future get() {
    RoomPK pk = new RoomPK();

    IRedis handler = new IRedisHandlerPool().getReaderHandler(store, _key);

    return handler.exists(_key)
    .then((int exists) {
      if (exists == 0) throw new IStoreException(20506, [_pkName]);
      return handler.get(_key);
    })
    .then((String value) => pk..set(int.parse(value))..setUpdated(false))
    .catchError((e) {
      if (e is IStoreException && e.code == 20506) return pk;
      throw e;
    });
  }

  static Future del(pk) {
    IRedis handler = new IRedisHandlerPool().getWriteHandler(store, _key);

    return handler.del(_key)
    .then((num deletedNum) {
      if (deletedNum == 0) new IStoreException(20507, [_pkName]);
      return deletedNum;
    })
    .catchError(_handleErr);
  }

  static Future incr() {
    RoomPK pk = new RoomPK();
    IRedis handler = new IRedisHandlerPool().getWriteHandler(store, _key);

    return handler.incr(_key)
    .then((num value) => pk..set(value)..setUpdated(false))
    .catchError(_handleErr);
  }

  static Future exists() {
    IRedis handler = new IRedisHandlerPool().getWriteHandler(store, _key);

    return handler.exists(_key);
  }

  static void _handleErr(e) => throw e;
}
