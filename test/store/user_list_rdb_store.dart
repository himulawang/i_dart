/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */

part of lib_test;

class UserListRedisStore {
  static const Map store = const {"type":"redis","readWriteSeparate":false,"shardMethod":"CRC32","master":"GameCache","slave":"GameCacheSlave","expire":86400,"mode":"Atom"};
  static const String abb = 'u-l';

  static Future set(UserList list) {
    if (list is! UserList) throw new IStoreException(20040);
    num id = list.getPK();
    if (id is! num) throw new IStoreException(20041);

    if (!list.isUpdated()) {
      new IStoreException(25009);
      Completer completer = new Completer();
      completer.complete(list);
      return completer.future;
    }

    RedisClient handler = new IRedisHandlerPool().getWriteHandler(store, list);
    String abbListKey = _makeAbbListKey(id);

    List waitList = [];
    list.getToAddList().forEach((num childId, User model) {
      String childKey = _makeChildKey(id);
      waitList..add(UserRedisStore.add(model, childKey))
              ..add(handler.sadd(abbListKey, childId.toString()));
    });

    list.getToSetList().forEach((num childId, User model) {
      String childKey = _makeChildKey(id);
      waitList.add(UserRedisStore.set(model, childKey));
    });

    list.getToDelList().forEach((num childId, User model) {
      String childKey = _makeChildKey(id);
      waitList..add(UserRedisStore.del(model, childKey))
              ..add(handler.srem(abbListKey, id.toString()));
    });

    return Future.wait(waitList)
    .then((_) => handler.expire(abbListKey, 86400))
    .then((_) => list..resetAllToList())
    .catchError(_handleErr);
  }

  static Future get(num id) {
    if (id is! num) throw new IStoreException(20037);
    UserList list = new UserList(id);

    RedisClient handler = new IRedisHandlerPool().getReaderHandler(store, list);
    String abbListKey = _makeAbbListKey(id);

    return handler.exists(abbListKey)
    .then((bool exist) {
      if (!exist) throw new IStoreException(25008);
      return handler.smembers(abbListKey);
    })
    .then((Set result) {
      if (result.length == 0) return list;

      List waitList = [];
      String childKey = _makeChildKey(id);
      result.forEach((String childId) {
        waitList.add(UserRedisStore.get(childId, childKey));
      });

      return Future.wait(waitList)
      .then((List dataList) {
        list..fromList(dataList);
      });
    })
    .catchError((e) {
      if (e is IStoreException && e.code == 25008) return list;
      throw e;
    });
  }

  static Future del(UserList list) {
    if (list is! UserList) throw new IStoreException(20038);
    num id = list.getPK();
    if (id is! num) throw new IStoreException(20039);

    RedisClient handler = new IRedisHandlerPool().getWriteHandler(store, list);
    String abbListKey = _makeAbbListKey(id);

    List waitList = [];
    list.getList().forEach((num childId, User model) {
      waitList.add(UserRedisStore.del(model));
    });

    waitList.add(handler.del(abbListKey));

    return Future.wait(waitList)
    .catchError(_handleErr);
  }

  static String _makeAbbListKey(num id) => '${abb}:${id}';

  static String _makeChildKey(num id) => '${UserRedisStore.abb}:${id}';

  static void _handleErr(e) => throw e;
}
