/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */

part of i_dart;

class IIndexedDBHandlerPool {
  static bool _initialized = false;
  static IIndexedDBHandlerPool _instance;

  static final Map dbs = <String, Database>{};

  Future init(Map config, Map upgradeScripts) {
    if (!IdbFactory.supported) throw new IStoreException(30001);

    List waitList = [];
    config.forEach((String dbName, Map config) {
      String name = config['db'];
      if (!upgradeScripts.containsKey(name)) throw new IStoreException(30002);

      Map upgradeScript = upgradeScripts[name];
      // find max db version
      int newVersion = upgradeScript.keys.map((v) => int.parse(v)).toList().reduce(max);

      waitList.add(
          window.indexedDB.open(name, version: newVersion, onUpgradeNeeded: (VersionChangeEvent e) {
            Database db = (e.target as Request).result;
            // upgrade all diff version
            int oldVersion = e.oldVersion;

            for (int nowVersion = oldVersion + 1; nowVersion <= newVersion; ++nowVersion) {
              String nowVersionString = nowVersion.toString();
              if (!upgradeScript.containsKey(nowVersionString)) continue;
              upgradeScript[nowVersion.toString()](db);
            }
          })
          .then((Database db) => dbs[name] = db)
          .catchError(_handleErr)
      );
    });

    return Future.wait(waitList).then((_) {
      _initialized = true;
      print('IndexedDB connected.');
    });
  }

  factory IIndexedDBHandlerPool() {
    if (_instance is IIndexedDBHandlerPool) return _instance;
    _instance = new IIndexedDBHandlerPool._internal();
    return _instance;
  }

  IIndexedDBHandlerPool._internal();

  static void _handleErr(err) => throw err;

  ObjectStore getWriteHandler(Map store) {
    _checkInitialized();

    String objectStoreName = store['objectStore'];
    Database db = dbs[store['master']];

    Transaction tran = db.transaction(objectStoreName, 'readwrite');
    ObjectStore objectStore = tran.objectStore(objectStoreName);
    return objectStore;
  }

  ObjectStore getReaderHandler(Map store) {
    _checkInitialized();

    String objectStoreName = store['objectStore'];
    Database db = dbs[store['master']];

    // FIXME. warning!! this transaction should use readonly mode,
    // but when use readonly mode, get data after operate it will cause
    // transaction chaos
    Transaction tran = db.transaction(objectStoreName, 'readwrite');
    ObjectStore objectStore = tran.objectStore(objectStoreName);
    return objectStore;
  }

  void _checkInitialized() {
    if (!_initialized) throw new IStoreException(30003);
  }
}
