/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */

class IRedisHandlerPool {
  static bool _initialized = false;
  static IRedisHandlerPool _instance;

  static final Map dbs = <String, List<IRedis>>{};
  static final Map nodesLength = <String, int>{};

  Future init(Map config) {
    // for configs
    List waitList = [];
    config.forEach((String groupName, List group) {
      // get groupName
      dbs[groupName] = new List(group.length);
      nodesLength[groupName] = group.length;

      // for nodes
      group.forEach((Map node) {
        //String connectionString = _makeConnectionString(node);
        IRedis handler = new IRedis(
            host: node['host'],
            port: node['port'],
            db: node['db'],
            password: node['pwd']
        );
        waitList.add(
            handler
            .connect()
            .then((_) => dbs[groupName][node['no']] = handler)
            .catchError(_handleErr)
        );
      });
    });
    return Future.wait(waitList).then((_) {
      _initialized = true;
      print('Redis connected.');
    });
  }

  factory IRedisHandlerPool() {
    if (_instance is IRedisHandlerPool) return _instance;
    _instance = new IRedisHandlerPool._internal();
    return _instance;
  }

  IRedisHandlerPool._internal();

  static void _handleErr(err) => throw err;

  IRedis getWriteHandler(Map store, String shardKey) {
    _checkInitialized();

    String groupType = 'master';
    String groupName = store[groupType];

    int modValue = nodesLength[groupName];
    int shardIndex = _getShardIndex(store['shardMethod'], shardKey, modValue);

    return dbs[groupName][shardIndex];
  }

  IRedis getReaderHandler(Map store, shardKey) {
    _checkInitialized();

    String groupType = store['readWriteSeparate'] ? 'slave' : 'master';
    String groupName = store[groupType];

    int modValue = nodesLength[groupName];
    int shardIndex = _getShardIndex(store['shardMethod'], shardKey, modValue);

    return dbs[groupName][shardIndex];
  }

  void _checkInitialized() {
    if (!_initialized) throw new IStoreException(20033);
  }

  int _getShardIndex(String shardMethod, shardKey, num modValue) {
    int shardIndex;
    switch (shardMethod) {
      case 'NONE':
        shardIndex = 0;
        break;
      case 'CRC32':
        shardIndex = CRC32.compute(shardKey.toString()) % modValue;
        break;
      default:
        throw new IStoreException(20008);
    }
    return shardIndex;
  }
}
