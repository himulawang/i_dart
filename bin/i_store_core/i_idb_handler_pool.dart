/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */

class IIndexedDBHandlerPool {
  static bool _initialized = false;
  static IIndexedDBHandlerPool _instance;

  static final Map dbs = <String, List<RedisClient>>{};
  static final Map nodesLength = <String, int>{};

  Future init(Map config) {
  }

  factory IIndexedDBHandlerPool() {
    if (_instance is IIndexedDBHandlerPool) return _instance;
    _instance = new IIndexedDBHandlerPool._internal();
    return _instance;
  }

  IIndexedDBHandlerPool._internal();

  static String _makeConnectionString(Map node) {
  }

  static void _handleErr(err) => throw err;

  RedisClient getWriteHandler(Map store, model) {
    _checkInitialized();

    String groupType = 'master';
    String groupName = store[groupType];

    int modValue = nodesLength[groupName];
    int shardIndex = _getShardIndex(store['shardMethod'], model, modValue);

    return dbs[groupName][shardIndex];
  }

  RedisClient getReaderHandler(Map store, model) {
    _checkInitialized();

    String groupType = store['readWriteSeparate'] ? 'slave' : 'master';
    String groupName = store[groupType];

    int modValue = nodesLength[groupName];
    int shardIndex = _getShardIndex(store['shardMethod'], model, modValue);

    return dbs[groupName][shardIndex];
  }

  void _checkInitialized() {
    if (!_initialized) throw new IStoreException(20033);
  }

  int _getShardIndex(String shardMethod, model, num modValue) {
    int shardIndex;
    switch (shardMethod) {
      case 'NONE':
        shardIndex = 0;
        break;
      case 'CRC32':
        shardIndex = CRC32.compute(model.getPK().toString()) % modValue;
        break;
      default:
        throw new IStoreException(20008);
    }
    return shardIndex;
  }
}
