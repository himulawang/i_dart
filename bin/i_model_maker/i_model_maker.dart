import 'dart:io';
import 'dart:convert';

class IModelMaker {
  List _orm;
  static final String _rootPath = Directory.current.path;
  static final String _srcPath = _rootPath + '/i_model_maker';
  String _outCoreDir;
  String _outModelDir;
  String _outStoreDir;
  static final String _DECLARATION = '''
/**
 * This script is generated by I Model Maker
 * DO NOT MODIFY!
 */
''';
  
  IModelMaker(this._orm);
  
  // abbreviation
  Map makeAbbs(List columns) {
    Map abbs = {};
    num i = 0;
    
    columns.forEach((String full) {
      String candidateAbb = makeAbb(full);
      while (abbs.containsValue(candidateAbb)) {
        candidateAbb = renameAbb(candidateAbb);
      }
      abbs[full] = candidateAbb;
    });
    
    return abbs;
  }
  String makeAbb(String full) {
    RegExp reg = new RegExp(r'[a-z]');
    return (full[0] + full.replaceAll(reg, '')).toLowerCase();
  }
  String renameAbb(String abb) {
    RegExp reg = new RegExp(r'^([a-zA-Z0-9]+)(\d+)$');

    String newAbb;
    if (reg.hasMatch(abb)) {
      reg.allMatches(abb).forEach((matches) {
        newAbb = '${matches.group(1)}${(int.parse(matches.group(2)) + 1)}';        
      });      
    } else {
      newAbb = '${abb}1';
    }
    return newAbb;
  }

  // lower underline case
  String makeLowerUnderline(String full) {
    RegExp reg = new RegExp(r'([A-Z])([a-z0-9]+)');
    
    String lowerName;
    if (reg.hasMatch(full)) {
      int loop = 0;
      Iterable matchGroup = reg.allMatches(full);
      matchGroup.forEach((matches) {
        if (loop == 0) {
          lowerName = matches.group(0).toLowerCase(); 
        } else {
          lowerName += '_${matches.group(1).toLowerCase()}${matches.group(2)}';
        }
        
        ++loop;
      });
    } else {
      print('orm.dart wrong.');
    }
    
    return lowerName;
  }

  // file system
  void copyFile(String srcPath, String srcFileName, String targetPath, String targetFileName) {
    File file = new File('${srcPath}/${srcFileName}');
    file.readAsString().then((String content) {
      writeFile(targetFileName, targetPath, content, true);
    });    
  }
  void write(File file, String content) {
    IOSink sink = file.openWrite();
    sink.write(content);
    sink.close();
    print('Write ${file.path} Done.');
  }
  void writeFile(String name, String path, String content, [bool overwrite = true]) {
    String fullname = '${path}/${name}';
    File file = new File(fullname);
    
    if (overwrite) {
      write(file, content);
    } else {
      file.exists().then((found) {
        if (!found) {
          write(file, content);
        }
      });
      print('${file.path} exists, skip.');
    }
  }
  
  void make(String targetPath) {
    // create i_model i_store directory
    makeSubDir(targetPath);

    // copy base model
    copyFile(_srcPath, 'i_pk.dart', _outCoreDir, 'i_pk.dart');
    copyFile(_srcPath, 'i_model.dart', _outCoreDir, 'i_model.dart');
    copyFile(_srcPath, 'i_list.dart', _outCoreDir, 'i_list.dart');
    copyFile(_srcPath, 'i_model_exception.dart', _outCoreDir, 'i_model_exception.dart');

    // make model files
    _orm.forEach((orm) {
      String lowerName = makeLowerUnderline(orm['name']);
      writeFile('${lowerName}_base_model.dart', _outModelDir, makeBaseModel(orm), true);
      writeFile('${lowerName}.dart', _outModelDir, makeModel(orm), true);
      writeFile('${lowerName}_base_pk.dart', _outModelDir, makeBasePK(orm), true);
      writeFile('${lowerName}_pk.dart', _outModelDir, makePK(orm), true);
      writeFile('${lowerName}_base_list.dart', _outModelDir, makeBaseList(orm), true);
      writeFile('${lowerName}_list.dart', _outModelDir, makeList(orm), true);
    });
    // make import package
    //writeFile('lib_i_model.dart', targetPath, makeModelPackage(), true);
  }
  
  String makeBaseModel(Map orm) {
    Map abbs = makeAbbs(orm['column']);
    List columns = [];
    Map mapAbb = {};
    Map mapFull = {};
    
    num length = orm['column'].length;
    
    for (num i = 0; i < length; ++i) {
      String full = orm['column'][i];
      columns.add({
        'i': i,
        'full': full,
        'abb': abbs[full],
        'toAdd': orm['toAddFilter'].contains(i),
        'toUpdate': orm['toUpdateFilter'].contains(i),
        'toAbb': orm['toAbbFilter'].contains(i),
        'toArray': orm['toArrayFilter'].contains(i),
        'toList': orm['toListFilter'].contains(i),
      });
      
      mapAbb[abbs[full]] = columns[i];
      mapFull[full] = columns[i];
    }

    String code = '''
${_DECLARATION}
part of lib_i_model;

class ${orm['name']}Base extends IModel {
  ${orm['name']}Base(args) : super(){
    _pk = ${orm['pk']};
    _columns = ${JSON.encode(columns)};
    _mapAbb = ${JSON.encode(mapAbb)};
    _mapFull = ${JSON.encode(mapFull)};

    _args = args == null ? new List.filled(${length}, null) : args;
    _length = ${length};
    _updatedList = new List.filled(${length}, false);
  }
''';

    for (num i = 0; i < length; ++i) {
      String full = orm['column'][i];
      code += '''

  void set ${full}(v) {
    if (_args[${i}] == v) return;
    _args[${i}] = v;
    _updatedList[${i}] = true;
  }
  get ${full} => _args[${i}];
''';
    }
    
    code += '}';

    return code;
  }
  String makeModel(Map orm) {
    String name = orm['name'];
    String code = '''
${_DECLARATION}
part of lib_i_model;

class ${name} extends ${name}Base {
  ${name}([args = null]) : super(args){}
}
''';
    return code;
  }
  String makeBasePK(Map orm) {
    String name = orm['name'];
    String code = '''
${_DECLARATION}
part of lib_i_model;

class ${name}BasePK extends IPK {
  ${name}BasePK(int pk) : super(){
    _pk = pk;
  }
}
''';
    return code;
  }
  String makePK(Map orm) {
    String name = orm['name'];
    String code = '''
${_DECLARATION}
part of lib_i_model;

class ${name}PK extends ${name}BasePK {
  ${name}PK([int pk = 0]) : super(pk){}
}
''';
    return code;
  }
  String makeBaseList(Map orm) {
    String name = orm['name'];
    String code = '''
${_DECLARATION}
part of lib_i_model;

class ${name}BaseList extends IList {
  ${name}BaseList(int pk, list) : super(){
    _pk = pk;
    if (list is Map) _list = list;
  }
}
''';
    return code;
  }
  String makeList(Map orm) {
    String name = orm['name'];
    String code = '''
${_DECLARATION}
part of lib_i_model;

class ${name}List extends ${name}BaseList {
  ${name}List(int pk, [list = null]) : super(pk, list){}
}
''';
    return code;
  }

  String makeModelPackage() {
    String code ='''
${_DECLARATION}
library lib_i_model;

''';
    _orm.forEach((Map orm) {
      String lowerName = makeLowerUnderline(orm['name']);
      code += '''
part 'i_model_exception.dart';
part 'i_model.dart';
part 'i_pk.dart';
part 'i_list.dart';

part '${lowerName}_base_model.dart';
part '${lowerName}.dart';
part '${lowerName}_base_pk.dart';
part '${lowerName}_pk.dart';
part '${lowerName}_base_list.dart';
part '${lowerName}_list.dart';
''';
    });
    
    return code;
  }

  void makeSubDir(String targetPath) {
    _outCoreDir = targetPath + '/i_core';
    Directory coreDir = new Directory(_outCoreDir);
    if (!coreDir.existsSync()) coreDir.createSync();

    _outModelDir = targetPath + '/i_model';
    Directory modelDir = new Directory(_outModelDir);
    if (!modelDir.existsSync()) modelDir.createSync();

    _outStoreDir = targetPath + '/i_store';
    Directory storeDir = new Directory(_outStoreDir);
    if (!storeDir.existsSync()) storeDir.createSync();
  }
}
