part of maker;

class IMaker {
  List _orm;
  String _rootPath;
  String _srcPath;
  String _outCoreDir;
  String _outModelDir;
  String _outStoreDir;
  final String _DECLARATION = '''
/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */
''';

  IMaker() {
    _rootPath = Directory.current.path;
    _srcPath = _rootPath + '/i_model_maker';
  }

  // abbreviation
  Map makeAbbs(List columns) {
    Map abbs = {};
    num i = 0;

    columns.forEach((String full) {
      String candidateAbb = makeAbb(full);
      while (abbs.containsValue(candidateAbb)) {
        candidateAbb = renameAbb(candidateAbb);
      }
      abbs[full] = candidateAbb;
    });

    return abbs;
  }
  String makeAbb(String full) {
    RegExp reg = new RegExp(r'[a-z]');
    return (full[0] + full.replaceAll(reg, '')).toLowerCase();
  }
  String renameAbb(String abb) {
    RegExp reg = new RegExp(r'^([a-zA-Z0-9]+)(\d+)$');

    String newAbb;
    if (reg.hasMatch(abb)) {
      reg.allMatches(abb).forEach((matches) {
        newAbb = '${matches.group(1)}${(int.parse(matches.group(2)) + 1)}';
      });
    } else {
      newAbb = '${abb}1';
    }
    return newAbb;
  }

  // lower underline case
  String makeLowerUnderline(String full) {
    RegExp reg = new RegExp(r'([A-Z])([a-z0-9]+)');

    String lowerName;
    if (reg.hasMatch(full)) {
      int loop = 0;
      Iterable matchGroup = reg.allMatches(full);
      matchGroup.forEach((matches) {
        if (loop == 0) {
          lowerName = matches.group(0).toLowerCase();
        } else {
          lowerName += '_${matches.group(1).toLowerCase()}${matches.group(2)}';
        }

        ++loop;
      });
    } else {
      print('orm.dart wrong.');
    }

    return lowerName;
  }

  // file system
  void copyFile(String srcPath, String srcFileName, String targetPath, String targetFileName) {
    File file = new File('${srcPath}/${srcFileName}');
    file.readAsString().then((String content) {
      writeFile(targetFileName, targetPath, content, true);
    });
  }
  void write(File file, String content) {
    IOSink sink = file.openWrite();
    sink.write(content);
    sink.close();
    print('Write ${file.path} Done.');
  }
  void writeFile(String name, String path, String content, [bool overwrite = true]) {
    String fullName = '${path}/${name}';
    File file = new File(fullName);

    if (overwrite) {
      write(file, content);
    } else {
      file.exists().then((found) {
        if (!found) {
          write(file, content);
        }
      });
      print('${file.path} exists, skip.');
    }
  }
  void makeSubDir(String targetPath) {
    _outCoreDir = targetPath + '/i_core';
    Directory coreDir = new Directory(_outCoreDir);
    if (!coreDir.existsSync()) coreDir.createSync();

    _outModelDir = targetPath + '/i_model';
    Directory modelDir = new Directory(_outModelDir);
    if (!modelDir.existsSync()) modelDir.createSync();

    _outStoreDir = targetPath + '/i_store';
    Directory storeDir = new Directory(_outStoreDir);
    if (!storeDir.existsSync()) storeDir.createSync();
  }
}
