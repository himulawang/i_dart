/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */

part of lib_test;

class UserSingleListIndexedDBStore extends IIndexedDBStore {
  static const String OBJECT_STORE_PK_NAME = '_pk';
  static const String OBJECT_STORE_INDEX_NAME = '_index';

  static const Map store = const {"type":"indexedDB","master":"GameIDB","objectStore":"UserSingle"};

  static Future<UserSingleList> set(UserSingleList list) {
    if (list is! UserSingleList) throw new IStoreException(22013);

    if (!list.isUpdated()) {
      new IStoreException(27003);
      Completer completer = new Completer();
      completer.complete(list);
      return completer.future;
    }

    ObjectStore handler = new IIndexedDBHandlerPool().getWriteHandler(store);

    List waitList = [];
    list.getToAddList().forEach((String childId, UserSingle model) {
      waitList.add(_addChild(model, handler));
    });

    list.getToSetList().forEach((String childId, UserSingle model) {
      waitList.add(_setChild(model, handler));
    });

    list.getToDelList().forEach((String childId, UserSingle model) {
      waitList.add(_delChild(model, handler));
    });

    return Future.wait(waitList)
    .then((_) => list..resetAllToList())
    .catchError(_handleErr);
  }

  static Future<UserSingleList> get(id) {
    List rawList = [];
    Completer completer = new Completer();
    ObjectStore handler = new IIndexedDBHandlerPool().getReaderHandler(store);

    UserSingleList list = new UserSingleList(id);

    handler.index(OBJECT_STORE_INDEX_NAME)
    .openCursor(range: KeyRange.only(list.getUnitedPK()), autoAdvance: true)
    .listen((CursorWithValue cursor) {
      rawList.add(new UserSingle()..fromAbb(cursor.value));
    }, onDone: () {
      completer.complete(list);
    });

    return completer.future;
  }

  static Future _addChild(UserSingle model, ObjectStore handler) {
    Map toAddAbb = model.toAddAbb(true);
    if (toAddAbb.length == 0) {
      new IStoreException(27005);
      Completer completer = new Completer();
      completer.complete();
      return completer.future;
    }

    toAddAbb
      ..[OBJECT_STORE_PK_NAME] = model.getUnitedWholePK()
      ..[OBJECT_STORE_INDEX_NAME] = model.getUnitedListPK();

    return handler.add(toAddAbb)
    .then((setKey) => model..setUpdatedList(false))
    .catchError((e) {
      if (e is Event) {
        if (e.target.error.message == 'Key already exists in the object store.') {
          new IStoreException(27004);
          return;
        }
        throw e.target.error;
      }
      throw e;
    });
  }

  static Future _setChild(UserSingle model, ObjectStore handler) {
    // indexedDB do not like redis, put(set) will overwrite the whole key
    // so we use toSet filter the whole _args
    Map toSetAbb = {};
    UserSingle._mapAbb.forEach((abb, i) {
      if (UserSingle._columns[i]['toSet']) return;
      toSetAbb[abb] = model._args[i];
    });

    if (toSetAbb.length == 0) new IStoreException(27006);

    toSetAbb
      ..[OBJECT_STORE_PK_NAME] = model.getUnitedWholePK()
      ..[OBJECT_STORE_INDEX_NAME] = model.getUnitedListPK();

    return handler.put(toSetAbb)
    .then((setKey) => model..setUpdatedList(false))
    .catchError(_handleErr);
  }

  static Future _delChild(UserSingle model, ObjectStore handler) {
    return handler.delete({ OBJECT_STORE_PK_NAME: model.getUnitedWholePK() })
    .catchError(_handleErr);
  }

  static void _handleErr(e) {
    if (e is Event) throw e.target.error;
    throw e;
  }
}
