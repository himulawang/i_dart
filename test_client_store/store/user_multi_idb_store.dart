/**
 * This script is generated by I Maker
 * DO NOT MODIFY!
 */


part of lib_test_client_store;

class UserMultiIndexedDBStore extends IIndexedDBStore {
  static const Map store = const {"type":"indexedDB","master":"GameIDB","objectStore":"UserMultiple"};
  static const String _modelName = 'UserMulti';

  static Future add(UserMulti model) {
    if (model is! UserMulti) throw new IStoreException(30004, [model.runtimeType, _modelName]);
    Map toAddAbb = model.toAddAbb(true);
    if (toAddAbb.length == 0) throw new IStoreException(30005, [_modelName]);

    toAddAbb['_pk'] = _makeKey(model);

    ObjectStore handler = new IIndexedDBHandlerPool().getWriteHandler(store);

    return handler.add(toAddAbb)
    .then((addKey) {
      return model..setUpdatedList(false);
    }).catchError((e) {
      if (e is Event) {
        if (e.target.error.message == 'Key already exists in the object store.') {
          throw new IStoreException(30007, [_modelName]);
        }
        throw e.target.error;
      }
      throw e;
    });
  }

  static Future set(UserMulti model) {
    if (model is! UserMulti) throw new IStoreException(30008, [model.runtimeType, _modelName]);

    // model has not been updated
    if (!model.isUpdated()) {
      new IStoreException(30501, [_modelName]);
      Completer completer = new Completer();
      completer.complete(model);
      return completer.future;
    }

    // indexedDB do not like redis, put(set) will overwrite the whole key
    // so we use toSet filter the whole _args
    Map toSetAbb = {};
    UserMulti._mapAbb.forEach((abb, i) {
      if (UserMulti._columns[i]['toSet']) return;
      toSetAbb[abb] = model._args[i];
    });
    if (toSetAbb.length == 0) throw new IStoreException(30009, [_modelName]);

    toSetAbb['_pk'] = _makeKey(model);

    ObjectStore handler = new IIndexedDBHandlerPool().getWriteHandler(store);

    return handler.put(toSetAbb)
    .then((setKey) {
      return model..setUpdatedList(false);
    }).catchError(_handleErr);
  }

  static Future get(id, name, uniqueName) {
    UserMulti model = new UserMulti()..setPK(id, name, uniqueName);

    var pk = _makeKey(model);

    ObjectStore handler = new IIndexedDBHandlerPool().getWriteHandler(store);

    return handler.getObject(pk)
    .then((result) {
      if (result == null) return model;
      return model..fromAbb(result)..setExist();
    }).catchError(_handleErr);
  }

  static Future del(UserMulti model) {
    if (model is! UserMulti) throw new IStoreException(30010, [model.runtimeType, _modelName]);

    var pk = _makeKey(model);

    ObjectStore handler = new IIndexedDBHandlerPool().getWriteHandler(store);

    return handler.delete(pk).catchError(_handleErr);
  }

  static _makeKey(UserMulti model) {
    var pk = model.getPK();
    if (pk is List) {
      if (pk.contains(null)) throw new IStoreException(30006, [_modelName]);
    } else {
      if (pk == null) throw new IStoreException(30006, [_modelName]);
    }
    return pk;
  }

  static _handleErr(e) {
    if (e is Event)  throw e.target.error;
    throw e;
  }
}
    